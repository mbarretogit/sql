USE LYCEUM
GO

-- --------------------------------------------------
-- Tabela Geral: Cadastra Depara Polo CRM
-- --------------------------------------------------
IF NOT EXISTS (SELECT TOP 1 1 FROM TABELA WHERE TAB = 'DeparaPoloCrm' AND SIS = 'Lyceum')
BEGIN
	INSERT INTO TABELA (TAB, SIS, DESCR) VALUES ('DeparaPoloCrm', 'Lyceum', 'Depara do Polo - Integração Lyceum x CRM')
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ITEMTABELA WHERE TAB = 'DeparaPoloCrm' AND ITEM = '03')
  BEGIN
	INSERT INTO ITEMTABELA VALUES ('DeparaPoloCrm', '03', 'POLO-FSA')
  END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ITEMTABELA WHERE TAB = 'DeparaPoloCrm' AND ITEM = '04')
  BEGIN
	INSERT INTO ITEMTABELA VALUES ('DeparaPoloCrm', '04', 'POLO-PAR')
  END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ITEMTABELA WHERE TAB = 'DeparaPoloCrm' AND ITEM = '05')
  BEGIN
	INSERT INTO ITEMTABELA VALUES ('DeparaPoloCrm', '05', 'POLO-VIC')
  END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ITEMTABELA WHERE TAB = 'DeparaPoloCrm' AND ITEM = '06')
  BEGIN
	INSERT INTO ITEMTABELA VALUES ('DeparaPoloCrm', '06', 'POLO-JEQ')
  END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ITEMTABELA WHERE TAB = 'DeparaPoloCrm' AND ITEM = '07')
  BEGIN
	INSERT INTO ITEMTABELA VALUES ('DeparaPoloCrm', '07', 'POLO-ITA')
  END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ITEMTABELA WHERE TAB = 'DeparaPoloCrm' AND ITEM = '20')
  BEGIN
	INSERT INTO ITEMTABELA VALUES ('DeparaPoloCrm', '20', 'POLO-SP')
  END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ITEMTABELA WHERE TAB = 'DeparaPoloCrm' AND ITEM = '21')
  BEGIN
	INSERT INTO ITEMTABELA VALUES ('DeparaPoloCrm', '21', 'POLO-JUA')
  END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ITEMTABELA WHERE TAB = 'DeparaPoloCrm' AND ITEM = '22')
  BEGIN
	INSERT INTO ITEMTABELA VALUES ('DeparaPoloCrm', '22', 'POLO-PET')
  END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ITEMTABELA WHERE TAB = 'DeparaPoloCrm' AND ITEM = '29')
  BEGIN
	INSERT INTO ITEMTABELA VALUES ('DeparaPoloCrm', '29', 'POLO-CEN')
  END
GO

-- --------------------------------------------------
-- Procedure: C_PR_INTEGRA_CRM_OFERTA
-- --------------------------------------------------
IF DBO.fn_ExisteProcedure('C_PR_INTEGRA_CRM_OFERTA') = 'S'
DROP PROCEDURE C_PR_INTEGRA_CRM_OFERTA
GO
CREATE PROCEDURE C_PR_INTEGRA_CRM_OFERTA
(
	@P_CONCURSO VARCHAR(20)
	, @P_OFERTA VARCHAR(200)
	, @P_CURSO VARCHAR(20)
	, @P_TURNO VARCHAR(20)
	, @P_CURRICULO VARCHAR(20)
	, @P_UNIDADE_FISICA VARCHAR(20)
	, @P_VAGAS INT
	, @P_ANO VARCHAR(100)
	, @P_PERIODO VARCHAR(100)
)
AS
BEGIN
SET NOCOUNT ON 
BEGIN TRY
	BEGIN TRANSACTION	
	DECLARE 
		@MsgErro VARCHAR(4000)
		, @DESCRICAO_ABREV T_ALFALARGE
		, @DESCRICAO_COMPL T_ALFAEXTRALARGE
		, @OFERTA T_NUMERO
		, @UNIDADE_FISICA T_CODIGO
		, @ANO T_ANO
		, @PERIODO T_SEMESTRE2

	IF (@P_ANO IS NOT NULL OR @P_PERIODO IS NOT NULL)
	BEGIN
		IF @P_ANO IS NULL
		BEGIN
			RAISERROR('Ano Letivo não pode ser nulo.', 11, 1)
		END
		ELSE IF @P_PERIODO IS NULL
		BEGIN
			RAISERROR('Periodo Letivo não pode ser nulo.', 11, 1)
		END
		ELSE IF NOT EXISTS
			(
				SELECT TOP 1 1 
				FROM LY_PERIODO_LETIVO
				WHERE CONVERT(VARCHAR(100), ANO) = @P_ANO
				AND CONVERT(VARCHAR(100), PERIODO) = @P_PERIODO
			)
		BEGIN
			RAISERROR('Ano|Periodo Letivo não cadastrado.', 11, 1)
		END
		ELSE 
		BEGIN
			SET @ANO = @P_ANO
			SET @PERIODO = @P_PERIODO
		END
	END

	--Depara do Turno
	SELECT @P_TURNO = ITEM
	FROM ITEMTABELA
	WHERE TAB = 'DeparaTurnoCrm'
	AND DESCR = @P_TURNO

	--Depara da unidade fisica  
	DECLARE @TIPO_CURSO VARCHAR(40)
	
	SELECT @TIPO_CURSO = TIPO
	FROM LY_CURSO
	WHERE CURSO = @P_CURSO

	IF @TIPO_CURSO = 'GRADUACAO-EAD' AND @P_UNIDADE_FISICA = '30'
	BEGIN
	
	SELECT @UNIDADE_FISICA = DESCR
	FROM ITEMTABELA
	WHERE TAB = 'DeparaPoloCrm'
	AND ITEM = SUBSTRING(@P_CURSO,3,2)													/*	ALTERADO PARA HABILITAR A INTEGRAÇÃO DE CURSOS EAD E SEMI-*/
	END	IF @TIPO_CURSO = 'GRADUACAO-SP' AND @P_UNIDADE_FISICA = '30'					/*	RESENCIAL EM 07/08/2018 por Miguel Barreto				*/
	BEGIN

	SELECT @UNIDADE_FISICA = DESCR
	FROM ITEMTABELA
	WHERE TAB = 'DeparaPoloCrm'
	AND ITEM = SUBSTRING(@P_CURSO,4,2)

	END
	ELSE IF @P_UNIDADE_FISICA NOT IN ('30')
	BEGIN

	SELECT @UNIDADE_FISICA = UNIDADE_FIS
	FROM LY_UNIDADE_FISICA
	WHERE FL_FIELD_01 = @P_UNIDADE_FISICA

	END

	IF @P_TURNO IS NULL AND @P_TURNO IS NOT NULL
	BEGIN
		RAISERROR('Turno não encontrada.', 11, 1)
	END
	ELSE IF @UNIDADE_FISICA IS NULL AND @P_UNIDADE_FISICA IS NOT NULL
	BEGIN
		RAISERROR('Unidade Fisica não encontrada.', 11, 1)
	END
	ELSE IF NOT EXISTS (SELECT TOP 1 1 FROM LY_CURSO WHERE CURSO = @P_CURSO)
	BEGIN
		RAISERROR('Curso não encontrado.', 11, 1)
	END
					
	--Caso não exista Oferta de curso cadastradas
	IF NOT EXISTS(SELECT TOP 1 1 FROM LY_OFERTA_CURSO WHERE CONCURSO = @P_CONCURSO AND FL_FIELD_01 = @P_OFERTA AND ANO_INGRESSO = @ANO AND PER_INGRESSO = @PERIODO)
	BEGIN		
		SELECT 
			@DESCRICAO_ABREV = (SELECT NOME FROM LY_CURSO WHERE CURSO = @P_CURSO)
			, @DESCRICAO_COMPL = (SELECT NOME FROM LY_CURSO WHERE CURSO = @P_CURSO)

		IF @DESCRICAO_ABREV IS NULL
		BEGIN
			RAISERROR('Descrição abreviada do curso não encontrado.', 11, 1)
		END 
		ELSE IF @DESCRICAO_COMPL IS NULL
		BEGIN
			RAISERROR('Descrição completa do curso não encontrado.', 11, 1)
		END

		--Limpa a tabela de erros
		DELETE ZZCRO_ERROS
		WHERE SPID = @@SPID

		SELECT 
			@OFERTA = ISNULL((SELECT MAX(OFERTA_DE_CURSO) FROM LY_OFERTA_CURSO), 0) + 1

		--Cadastra a oferta de curso
		EXEC LY_OFERTA_CURSO_INSERT
		    @OFERTA_DE_CURSO = @OFERTA
			, @ID_SUB_GRUPO_OFERTA = 1
			, @CURSO = @P_CURSO
			, @TURNO = @P_TURNO
			, @CURRICULO = @P_CURRICULO
			, @ANO_INGRESSO = @ANO
			, @PER_INGRESSO = @PERIODO
			, @DTINI = NULL
			, @DTFIM = NULL
			, @DESCRICAO_ABREV = @DESCRICAO_ABREV
			, @DESCRICAO_COMPL = @DESCRICAO_COMPL
			, @CONCURSO = @P_CONCURSO
			, @CURSO_OFERTADO = @P_CURSO
			, @AREA = 'GERAL'
			, @VAGAS = @P_VAGAS
			, @MIN_GRUPO = NULL
			, @PERC_AJUSTE_VAGAS = NULL
			, @TIPO_PROC_SELETIVO = NULL
			, @TIPOOFERTA = NULL
			, @ULTIMA_CHAMADA = NULL
			, @SERIE = NULL
			, @VAGAS_REMANESC = NULL
			, @UNIDADE_FISICA = @UNIDADE_FISICA
			, @EXIBE_GRADE = 'N'
			, @MENSAGEM = NULL
			, @MAX_RESP_FINAN = NULL
			, @VALOR_INSCRICAO = NULL
			, @FACULDADE_CONVENIADA = NULL
			, @DTINI_INTERESSE = NULL
			, @DTFIM_INTERESSE = NULL
			, @MATRIC_TODAS_OPCOES = 'N'
			, @NAO_REALIZA_PRE_MATR = 'N'
			, @VALOR_A_VISTA_ESTIMADO = NULL
			, @SENHA = NULL
			, @MINIMO_INSCRICOES = NULL
			, @DISCIPLINA = NULL
			, @TURMA = NULL
			, @TURMA_PREF = NULL
			, @FL_FIELD_01 = @P_OFERTA
	
		--Busca os erros gerados
		EXEC GetErros 
			@MsgErro OUTPUT

		--Verificar se houve algum erro
		IF @MsgErro IS NOT NULL AND RTRIM(@MsgErro) <> ''
		BEGIN
			RAISERROR(@MsgErro, 11,1)
		END
	END		
	
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	IF XACT_STATE() <> 0
	BEGIN
		ROLLBACK TRANSACTION;
	END;

	DECLARE 
		@ErrorMessage NVARCHAR(MAX)
		, @ErrorState INT
		, @ErrorSeverity INT

	SELECT 
		@ErrorMessage = ERROR_MESSAGE()
		, @ErrorState = ERROR_STATE()
		, @ErrorSeverity = ERROR_SEVERITY()

	RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState)
END CATCH
SET NOCOUNT OFF
END
GO